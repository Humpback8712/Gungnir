// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: pkg/grpc/health.proto

package pb_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	Keep(ctx context.Context, opts ...grpc.CallOption) (Health_KeepClient, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Keep(ctx context.Context, opts ...grpc.CallOption) (Health_KeepClient, error) {
	stream, err := c.cc.NewStream(ctx, &Health_ServiceDesc.Streams[0], "/Health/Keep", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthKeepClient{stream}
	return x, nil
}

type Health_KeepClient interface {
	Send(*HealthCheckRequest) error
	Recv() (*HealthPackage, error)
	grpc.ClientStream
}

type healthKeepClient struct {
	grpc.ClientStream
}

func (x *healthKeepClient) Send(m *HealthCheckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthKeepClient) Recv() (*HealthPackage, error) {
	m := new(HealthPackage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	Keep(Health_KeepServer) error
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (UnimplementedHealthServer) Keep(Health_KeepServer) error {
	return status.Errorf(codes.Unimplemented, "method Keep not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_Keep_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthServer).Keep(&healthKeepServer{stream})
}

type Health_KeepServer interface {
	Send(*HealthPackage) error
	Recv() (*HealthCheckRequest, error)
	grpc.ServerStream
}

type healthKeepServer struct {
	grpc.ServerStream
}

func (x *healthKeepServer) Send(m *HealthPackage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthKeepServer) Recv() (*HealthCheckRequest, error) {
	m := new(HealthCheckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Health",
	HandlerType: (*HealthServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Keep",
			Handler:       _Health_Keep_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/grpc/health.proto",
}
